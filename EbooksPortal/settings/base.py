"""
Django settings for EbooksPortal project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import json
from pathlib import Path
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
KEY = BASE_DIR / 'secrets.json'
SECRETS = json.loads(open(KEY, 'r').read())

def get_secret(setting, secrets=SECRETS):
    try:
        return secrets[setting]
    except KeyError:
        error = f'Set the {setting} environment variable.'
        raise ImproperlyConfigured(error)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    'books',
    'portal',
    'papers',
    'apis',
    
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    
    'captcha',
    
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',

    'simple_history'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'EbooksPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'EbooksPortal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

if DEBUG:
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.mysql',
           'NAME': 'EbooksPortal',
           'USER': 'EbooksPortal',
           'PASSWORD': 'portal@2',
           'HOST': 'localhost',
           'PORT': 3306,
           'OPTIONS': {
           'autocommit': True,
           },
       }
   }
else:
   DB_DATA = get_secret('DATABASE')
   DATABASES = {
       'default': {
           'ENGINE': get_secret('ENGINE', secrets=DB_DATA),
           'NAME': get_secret('NAME', secrets=DB_DATA),
           'USER': get_secret('USER', secrets=DB_DATA),
           'PASSWORD': get_secret('PASSWORD', secrets=DB_DATA),
           'HOST': get_secret('HOST', secrets=DB_DATA),
           'PORT': get_secret('PORT', secrets=DB_DATA),
       }
   }


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'assets'
STATICFILES_DIRS =[
    BASE_DIR / 'static',
]


SITE_ID = 1


if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_DATA = get_secret('EMAIL')
    EMAIL_BACKEND = get_secret('BACKEND', secrets=EMAIL_DATA)
    EMAIL_HOST_USER = get_secret('USER', secrets=EMAIL_DATA)
    EMAIL_HOST_PASSWORD = get_secret('PASSWORD', secrets=EMAIL_DATA)
    EMAIL_HOST = get_secret('HOST', secrets=EMAIL_DATA)
    EMAIL_PORT = get_secret('PORT', secrets=EMAIL_DATA)
    EMAIL_USE_TLS = get_secret('USE_TLS', secrets=EMAIL_DATA)
    EMAIL_USE_SSL = get_secret('USE_SSL', secrets=EMAIL_DATA)
    TO = get_secret('TO', secrets=EMAIL_DATA)


RECAPTCHA_DATA = get_secret('RECAPTCHA')
RECAPTCHA_PUBLIC_KEY = get_secret('PUBLIC_KEY', RECAPTCHA_DATA)
RECAPTCHA_PRIVATE_KEY = get_secret('PRIVATE_KEY', RECAPTCHA_DATA)
RECAPTCHA_PROXY = {
    'http': 'http://127.0.0.1:8000'
}


ACCOUNT_FORMS = {
    'signup': 'portal.forms.CustomSignUpForm',
}


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username'
LOGIN_REDIRECT_URL = '/'